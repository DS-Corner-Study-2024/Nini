1.1 스프링 프레임워크
자바 언어를 이용해 엔터프라이즈급 개발을 편리하게 만들어주는 '오픈소스 경량급 애플리케이션 프레임워크'
* 엔터프라이즈급 개발: 기업 환경을 대상으로 하는 개발
스프링의 핵심 가치 "애플리케이션 개발에 필요한 기반을 제공해서 개발자가 비즈니스 로직 구현에만 집중할 수 있게끔 하는 것"

1.1.1 제어 역전(IoC)
사용할 객체를 직접 생성하지 않고 객체의 생명주기 관리를 외부(스프링컨테이너/IoC 컨테이너)에 위임
의존성 주입, 관점 지향 프로그래밍 등이 가능해짐

1.1.2 의존성 주입(DI)
제어 역전의 방법 중 하나. 사용할 객체를 직접 생성하지 않고 외부 컨테이너가 생성한 객체를 주입받아 사용하는 방식
- 생성자를 통한 의존성 주입
@Autowired 
공식문서에서 권장하는 방법 (레퍼런스 객체 없이는 객체를 초기화할 수 없게 설계할 수 있기 때문)
- 필드 객체 선언을 통한 의존성 주입
- setter 메서드를 통한 의존성 주입

1.1.3 관점 지향 프로그래밍(AOP)
관점을 기준으로 묶어 개발하는 방식
관점이란, 어떤 기능 구현할 때 그 기능을 '핵심기능'과 '부가기능'으로 구분해 각각 하나의 관점으로 보는 것
핵심 기능: 비즈니스 로직이 처리하려는 목적 기능
부가 기능: 핵심 기능인 비즈니스 로직 사이에 로깅 처리하거나 트랙잭션 처리하는 코드
여러 비즈니스 로직 사이에서 반복되는 부가 기능을 하나의 공통 로직으로 처리하도록 모듈화해 삽입하는 방식

2.1 서버 간 통신
마이크로서비스 아키텍처(MSA)
: 서비스 규모를 작게 나누어 구성한 아키텍처, 애플리케이션 하나에 여러 기능을 넣어 개발하지 않고 기능별로 나눠서 개발
서버 간 통신은 한 서버가 다른 서버에 통신을 요청하는 것. 한 대는 서버, 한 대는 클라이언트

2.3 레이어드 아키텍처
애플리케이션의 컴포넌트를 유사 관심사를 기준으로 레이어드로 묶어 수평적으로 구성한 구조
- 프레젠테이션 계층
애플리케이션의 최상단 계층, 클라이언트의 요청을 해석하고 응답하는 역할
- 비즈니스 계층
애플리케이션이 제공하는 기능 정의하고 세부작업 수행하는 도메인 객체를 통해 업무를 위임하는 역할 수행
DDD 기반의 아키텍처에서는 비즈니스 로직에 도메인이 포함되기도 하고, 별도로 도메인 계층을 두기도 함
- 데이터 접근 계층
데이터베이스에 접근하는 일련의 작업 수행

각 레이어는 가장 가까운 하위 레이어의 의존성을 주입받는다.
각 레이어는 관심사에 따라 묶여 있으며, 다른 레이어의 역할을 침범하지 않는다.
    - 각 컴포넌트의 역할이 명확하므로 코드의 가독성과 기능 구현에 유리하다. 
    - 코드의 확장성도 좋아진다.
각 레이어가 독립적으로 작성되면 다른 레이어와의 의존성을 낮춰 단위테스트에 용이하다.

스프링의 레이어드 아키텍처
- 프레젠테이션 계층
유저 인터페이스 계층
클라이언트와의 접점
클라이언트로부터 데이터와 함께 요청을 받고 처리 결과를 응답으로 전달하는 역할
- 비즈니스 계층
서비스 계층
핵심 비즈니스 로직 구현하는 영역
트랜잭션 처리나 유효성 검사 등의 작업도 수행
- 데이터 접근 계층
영속 계층
데이터베이스에 접근해야 하는 작업 수행
리포지터리로 대체 가능

2.5 REST API
대중적으로 가장 많이 사용되는 애플리케이션 인터페이스, -> 클라이언트가 서버에 접근하고 자원 조작할 수 있음
REST란, 주고받는 자원에 이름을 규정하고 URI에 명시에 HTTP 메서드를 통해 해당 자원의 상태를 주고받는 것
REST API란, REST 아키텍처를 따르는 시스템/애플리케이션 인터페이스. 
REST의 특징
- 유니폼 인터페이스
일관된 인터페이스, REST 서버는 HTTP 표준 전송 규약 따르기 때문에 어떤 프로그래밍 언어로 만들어졌느냐와 상관없이 플랫폼 및 기술에 종속되지 않고 호환해 사용 가능
- 무상태성
서버에 상태 정보를 따로 보관하거나 관리하지 않음. 서버가 불필요한 정보를 관리하지 않으므로 비즈니스 로직의 자유도가 높고 설계 간단
- 캐시 가능성
캐싱이 가능한 경우 클라이언트에서 캐시에 저장해두고 같은 요청에 대해서는 해당 데이터 가져다가 사용. 서버의 트랜잭션 부하가 줄어들어 효율적이며 사용자 입장에서 성능 개선
- 레이어 시스템
네트워크 상의 여러 계층으로 구성될 수 있음. 클라이언트는 서버와 연결되는 포인트만 알면 됨.
- 클라이언트-서버 아키텍처
REST 서버는 API 제공하고 클라이언트는 사용자 정보를 관리하는 구조로 분리해 설계, 서로에 대한 의존성 낮추는 기능

URL 규칙
URL 마지막에는 / 포함하지 않음
언더바 대신 하이픈 이용
행위가 아닌 결과 포함
소문자로 작성
파일의 확장자는 URL에 포함 x

